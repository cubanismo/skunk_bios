-Need two persistent bits, writeable when flashing ROMs but outside of the
 regions actually containing important ROM data,  to store eeprom chip select
 for each flash bank.
 -Skunk BIOS in bank 0 is write-locked such that only the upgrader
  can write it to prevent accidental BIOS corruption.
 -In 4MB mode, the BIOS is copied to bank 1 when bank 1 is first booted.
 -In 6MB mode, the top 2MB are not used.

-Solution Idea:
 -Reserve top DWORD of BIOS area in Bank 1 as stateful data
 -Don't overwrite this data when copying BIOS
 -When flashing either bank in 2MB or 4MB mode, store its corresponding
  EEPROM chip select bit in this DWORD somewhere.
  -When flashing in 6MB mode, reserve DWORD just after end of 6MB (2MB into
  "bank 1") instead.
 -Before starting program, but after selecting program mode (such that we're
  able to determine the persistent data DWORD location, per above logic),
  read this data and set flash bank.
 -Allow overriding bank on jcp command line as well:
  -Add a new "start" command that takes a tri-state "EEPROM select" parameter
   as well: 0 = chip 0, 1 = chip 1, 2 = default.
  -Add a new "set bank EEPROM chip select" command, which will use the same
   machinery used by the "flash" command, to set the EEPROM select bit for a
   given bank without re-flashing a ROM.

-Notes:
 -Doesn't appear to be a separate "start" command in the BIOS right now. jcp
  just sends a dummy data upload request instead. Needs more investigation.
  Want to be able to override the EEPROM chip select via command line without
  burning it to flash when uploading BJL-style files for development/testing.
  -Top nibble of start address is reserved for flags. It looks like there is
   one bit free. Can probably use that to select alternate EEPROM chip when
   sending start address. This is how the 2nd flash bank and 6MB mode is
   selected. Alternatively, we can use the last free bit to indicate an extra
   byte of header data if we only send it on BIOSes that support it or
   something. Might be able to find other bits in the data header if using
   this method as well. However, checking board version from jcp is a somewhat
   heavyweight operation.
  -Is there some way to always send the chip select value when uploading, but
   only burn it in when flashing? Do the burning as part of flash setup step
   in jcp? As new, separate command?
   -Looks like there are some free bits in the flash header data. Can use
    these to specify whether to flash an EEPROM select bit, and what the
    bit should be.
 -jcp ignores 6MB mode if not needed and boot-only isn't in effect. If there
  is a separate option to just burn chip select to flash, will likely want
  to keep 6MB mode enabled (If it affects anything in jcp that matters) for
  that command line option as well.
 -Need to ensure chip select data persists across flashes of bank 1 somehow
  in certain cases:
  -Flash bank 0: Won't touch bank 1, where chip select bits are stored.
  -Flash 6MB: There's only going to be one chip select value, and it'll
   always be written as part of flashing, so there's nothing to preserve
   here.
  -Flash bank 1: sectors containing chip select data will be erased!  Chip
   select data for bank 1 will be written as part of the flash, but need to
   find a way to save & re-write the chip select data for bank 0.
 -Need to look at flash data sheet and see if there's a way to erase just the
  few words used to store the chip select data. Otherwise, it's more or less
  harmless to erase bank 1's BIOS area, as it gets copied over again whenever
  it is needed, but it seems wasteful. Would need to see what this means for
  the 6MB mode, but would probably be similar there: We could just carve out
  an entire sector. Only thing this might interfere with is autoboot stuff,
  but none of that exists right now AFAIK.

-EEPROM Dump/Flash:
 -Looking at RomDump, it makes a lot of assumptions:
  -jcp hacks in bank select bit by manually patching the binary. Can do same
   to select EEPROM chip.
  -jcp pre-opens the file. This avoids RomDump needing to open the correct
   file name. Can do the same in EEPROM dumper & flasher.
  -Other than that, use skunkFILE[READ/WRITE], skunkFILECLOSE, and
   skunkCONSOLECLOSE as usual.
  -RomDump is responsible for manually generating the flickery lines on the
   Jaguar screen to indicate progress/debug hangs. Should copy that code to
   EEPROM reader.
